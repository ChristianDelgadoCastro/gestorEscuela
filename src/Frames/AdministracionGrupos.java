/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frames;

import Clases.Conectar;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableRowSorter;
import javax.swing.text.Document;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.chart.ui.TextAnchor;
import org.jfree.data.category.DefaultCategoryDataset;
//.*;

/**
 *
 * @author Christian Delgado
 */
public class AdministracionGrupos extends javax.swing.JFrame {

    private String campoEspecialidad1;
    private String campoGrupo;

    /**
     * Creates new form AdministracionGrupos
     */
    int xMouse, yMouse;

    public AdministracionGrupos(String grupo, String especialidad) {
        //TextPrompt buscar = new TextPrompt("Buscar nctontrol", txtBuscar);
        initComponents();
        this.setLocationRelativeTo(null);
        this.campoEspecialidad1 = especialidad;
        this.campoGrupo = grupo;

        txtGrupo.setText(grupo);
        txtEspecialidad.setText(especialidad);
        cerrar();
        mostrarTabla(grupo, especialidad);
        cargarAsignaturas();
        ListAsignaturas.setEnabled(false);
        btnAgregarAsignaturas.setEnabled(false);
        btnEliminarAsignaturas.setEnabled(false);
        //Verifica si hay registros de inglés
        boolean hayRegistrosIngles = verificarEspecialidadIngles(especialidad);
        btnAdminIngles.setEnabled(hayRegistrosIngles);

        // Obtén el Document del campo de texto txtBuscar
        Document buscarDocument = txtBuscar.getDocument();

// Agrega un DocumentListener al Document del campo de texto
        buscarDocument.addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                aplicarFiltro();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                aplicarFiltro();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                aplicarFiltro();
            }
        });
    }

    //Constructor
    private AdministracionGrupos() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAlumnosGrupo = new javax.swing.JTable();
        btnCambiarCalificacion = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        btnGenerarBoletasTodos = new javax.swing.JButton();
        btnGenerarBoletaAlumno = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtEspecialidad = new javax.swing.JLabel();
        txtGrupo = new javax.swing.JLabel();
        btnHabilitarAsignaturas = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListAsignaturas = new javax.swing.JList<>();
        btnAgregarAsignaturas = new javax.swing.JButton();
        btnEliminarAsignaturas = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        header = new javax.swing.JPanel();
        backBtn = new javax.swing.JPanel();
        backTxt = new javax.swing.JLabel();
        exitBtn = new javax.swing.JPanel();
        exitTxt = new javax.swing.JLabel();
        minimizeBtn4 = new javax.swing.JPanel();
        minimizeTxt4 = new javax.swing.JLabel();
        btnAdminIngles = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaAlumnosGrupo.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        tablaAlumnosGrupo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        tablaAlumnosGrupo.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        tablaAlumnosGrupo.setGridColor(new java.awt.Color(0, 0, 0));
        tablaAlumnosGrupo.setOpaque(false);
        tablaAlumnosGrupo.setSelectionBackground(new java.awt.Color(232, 57, 95));
        tablaAlumnosGrupo.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tablaAlumnosGrupo.setShowVerticalLines(true);
        tablaAlumnosGrupo.getTableHeader().setResizingAllowed(false);
        tablaAlumnosGrupo.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaAlumnosGrupo);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 117, 619, 490));

        btnCambiarCalificacion.setBackground(new java.awt.Color(255, 255, 51));
        btnCambiarCalificacion.setFont(new java.awt.Font("Roboto Medium", 0, 18)); // NOI18N
        btnCambiarCalificacion.setText("Cambiar calificaciones");
        btnCambiarCalificacion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCambiarCalificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCambiarCalificacionActionPerformed(evt);
            }
        });
        jPanel4.add(btnCambiarCalificacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 80, 220, -1));

        txtBuscar.setToolTipText("Filtrar por nControl");
        txtBuscar.setBorder(null);
        jPanel4.add(txtBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 40, 140, 30));

        btnGenerarBoletasTodos.setBackground(new java.awt.Color(153, 255, 255));
        btnGenerarBoletasTodos.setFont(new java.awt.Font("Roboto Medium", 0, 18)); // NOI18N
        btnGenerarBoletasTodos.setText("Generar boleta grupal");
        btnGenerarBoletasTodos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGenerarBoletasTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarBoletasTodosActionPerformed(evt);
            }
        });
        jPanel4.add(btnGenerarBoletasTodos, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 80, -1, -1));

        btnGenerarBoletaAlumno.setBackground(new java.awt.Color(153, 255, 153));
        btnGenerarBoletaAlumno.setFont(new java.awt.Font("Roboto Medium", 0, 18)); // NOI18N
        btnGenerarBoletaAlumno.setText("Generar boleta única");
        btnGenerarBoletaAlumno.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGenerarBoletaAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarBoletaAlumnoActionPerformed(evt);
            }
        });
        jPanel4.add(btnGenerarBoletaAlumno, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        jLabel1.setFont(new java.awt.Font("Roboto Medium", 1, 18)); // NOI18N
        jLabel1.setText("Especialidad:");
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 50, -1, -1));

        jLabel3.setFont(new java.awt.Font("Roboto Medium", 1, 18)); // NOI18N
        jLabel3.setText("Buscar:");
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 50, -1, -1));

        txtEspecialidad.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        txtEspecialidad.setText("jLabel4");
        jPanel4.add(txtEspecialidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 50, 160, -1));

        txtGrupo.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        txtGrupo.setText("jLabel2");
        jPanel4.add(txtGrupo, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, -1, -1));

        btnHabilitarAsignaturas.setBackground(new java.awt.Color(102, 255, 0));
        btnHabilitarAsignaturas.setFont(new java.awt.Font("Roboto Medium", 0, 18)); // NOI18N
        btnHabilitarAsignaturas.setText("Habilitar");
        btnHabilitarAsignaturas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHabilitarAsignaturas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHabilitarAsignaturasActionPerformed(evt);
            }
        });
        jPanel4.add(btnHabilitarAsignaturas, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 120, 150, -1));

        ListAsignaturas.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        ListAsignaturas.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ListAsignaturas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane2.setViewportView(ListAsignaturas);

        jPanel4.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 160, 155, 200));

        btnAgregarAsignaturas.setBackground(new java.awt.Color(51, 255, 0));
        btnAgregarAsignaturas.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        btnAgregarAsignaturas.setText("Agregar asignatura");
        btnAgregarAsignaturas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAgregarAsignaturas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarAsignaturasActionPerformed(evt);
            }
        });
        jPanel4.add(btnAgregarAsignaturas, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 370, 155, -1));

        btnEliminarAsignaturas.setBackground(new java.awt.Color(255, 0, 0));
        btnEliminarAsignaturas.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        btnEliminarAsignaturas.setText("Eliminar asignatura");
        btnEliminarAsignaturas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminarAsignaturas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarAsignaturasActionPerformed(evt);
            }
        });
        jPanel4.add(btnEliminarAsignaturas, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 400, 156, -1));

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel4.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 70, 140, 10));

        jLabel4.setFont(new java.awt.Font("Roboto Medium", 1, 18)); // NOI18N
        jLabel4.setText("Grupo:");
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        header.setBackground(new java.awt.Color(255, 255, 255));
        header.setForeground(new java.awt.Color(255, 255, 255));
        header.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                headerMouseDragged(evt);
            }
        });
        header.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                headerMousePressed(evt);
            }
        });

        backBtn.setBackground(new java.awt.Color(255, 255, 255));

        backTxt.setBackground(new java.awt.Color(255, 255, 255));
        backTxt.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        backTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backTxt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/backbtn.png"))); // NOI18N
        backTxt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backTxt.setPreferredSize(new java.awt.Dimension(40, 40));
        backTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backTxtMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                backTxtMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                backTxtMouseExited(evt);
            }
        });

        javax.swing.GroupLayout backBtnLayout = new javax.swing.GroupLayout(backBtn);
        backBtn.setLayout(backBtnLayout);
        backBtnLayout.setHorizontalGroup(
            backBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        backBtnLayout.setVerticalGroup(
            backBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backBtnLayout.createSequentialGroup()
                .addComponent(backTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        exitBtn.setBackground(new java.awt.Color(255, 255, 255));

        exitTxt.setBackground(new java.awt.Color(255, 255, 255));
        exitTxt.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        exitTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitTxt.setText("X");
        exitTxt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitTxt.setPreferredSize(new java.awt.Dimension(40, 40));
        exitTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitTxtMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exitTxtMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exitTxtMouseExited(evt);
            }
        });

        javax.swing.GroupLayout exitBtnLayout = new javax.swing.GroupLayout(exitBtn);
        exitBtn.setLayout(exitBtnLayout);
        exitBtnLayout.setHorizontalGroup(
            exitBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(exitTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
        );
        exitBtnLayout.setVerticalGroup(
            exitBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, exitBtnLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(exitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        minimizeBtn4.setBackground(new java.awt.Color(255, 255, 255));
        minimizeBtn4.setPreferredSize(new java.awt.Dimension(40, 30));

        minimizeTxt4.setFont(new java.awt.Font("Roboto Black", 0, 18)); // NOI18N
        minimizeTxt4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        minimizeTxt4.setText("—");
        minimizeTxt4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeTxt4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                minimizeTxt4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                minimizeTxt4MouseExited(evt);
            }
        });

        javax.swing.GroupLayout minimizeBtn4Layout = new javax.swing.GroupLayout(minimizeBtn4);
        minimizeBtn4.setLayout(minimizeBtn4Layout);
        minimizeBtn4Layout.setHorizontalGroup(
            minimizeBtn4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(minimizeBtn4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(minimizeTxt4, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
        );
        minimizeBtn4Layout.setVerticalGroup(
            minimizeBtn4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(minimizeBtn4Layout.createSequentialGroup()
                .addComponent(minimizeTxt4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout headerLayout = new javax.swing.GroupLayout(header);
        header.setLayout(headerLayout);
        headerLayout.setHorizontalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerLayout.createSequentialGroup()
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 724, Short.MAX_VALUE)
                .addComponent(minimizeBtn4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        headerLayout.setVerticalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerLayout.createSequentialGroup()
                .addGroup(headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(exitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(backBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(minimizeBtn4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.add(header, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 850, 30));

        btnAdminIngles.setBackground(new java.awt.Color(153, 102, 255));
        btnAdminIngles.setFont(new java.awt.Font("Roboto Medium", 0, 18)); // NOI18N
        btnAdminIngles.setText("Calificar inglés");
        btnAdminIngles.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdminIngles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminInglesActionPerformed(evt);
            }
        });
        jPanel4.add(btnAdminIngles, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 520, 160, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean verificarEspecialidadIngles(String especialidad) {
        return especialidad.matches(".*[Ii][Nn][Gg][Ll][Ee][Ss].*|[Ii][Nn][Gg][Ll][Éé][Ss].*");
    }


    private void btnAgregarAsignaturasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarAsignaturasActionPerformed
        // Obtener el grupo y especialidad del JLabel txtGrupo y txtEspecialidad
        String grupo = txtGrupo.getText();
        String especialidad = txtEspecialidad.getText();

        // Obtener las asignaturas seleccionadas de la JList
        List<String> asignaturasSeleccionadas = ListAsignaturas.getSelectedValuesList();

        // Obtener los nControlAsignatura correspondientes a las asignaturas seleccionadas
        List<String> nControlAsignaturas = new ArrayList<>();
        for (String asignatura : asignaturasSeleccionadas) {
            String nControlAsignatura = obtenerNControlAsignatura(asignatura);
            if (nControlAsignatura != null) {
                nControlAsignaturas.add(nControlAsignatura);
            } else {
                JOptionPane.showMessageDialog(null, "Error al obtener el nControlAsignatura para la asignatura: " + asignatura);
                return;
            }
        }

        // Obtener los nControl de los alumnos que pertenecen al grupo
        List<String> nControlAlumnos = new ArrayList<>();
        String sql = "SELECT ncontrol FROM dbo.alumnos WHERE grupo = ? AND estatus = 'ac'";
        try {
            PreparedStatement pst = cn.prepareStatement(sql);
            pst.setString(1, grupo);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                String nControl = rs.getString("ncontrol");
                nControlAlumnos.add(nControl);
            }
        } catch (SQLException e) {
            System.err.println(e);
            JOptionPane.showMessageDialog(null, "Error al obtener los nControl de los alumnos. Contacta al administrador.");
            return;
        }

        // Insertar los registros en la tabla calificaciones
        int registrosAgregados = 0;
        for (String nControl : nControlAlumnos) {
            for (String nControlAsignatura : nControlAsignaturas) {
                // Verificar si el registro ya existe en la tabla calificaciones
                boolean registroExistente = verificarRegistroExistente(grupo, nControlAsignatura, nControl);

                if (!registroExistente) {
                    // Insertar los datos en la tabla calificaciones
                    String insertSql = "INSERT INTO dbo.calificaciones (ncontrol, grupo, calificacion, nControlAsignatura) VALUES (?, ?, NULL, ?)";
                    try {
                        PreparedStatement insertPst = cn.prepareStatement(insertSql);
                        insertPst.setString(1, nControl);
                        insertPst.setString(2, grupo);
                        insertPst.setString(3, nControlAsignatura);

                        int resultado = insertPst.executeUpdate();
                        if (resultado > 0) {
                            registrosAgregados++;
                        } else {
                            JOptionPane.showMessageDialog(null, "Error al agregar la asignatura al grupo. Contacta al administrador.");
                        }
                    } catch (SQLException e) {
                        System.err.println(e);
                        JOptionPane.showMessageDialog(null, "Error al agregar la asignatura al grupo. Contacta al administrador.");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El registro con grupo: " + grupo + ", nControlAsignatura: " + nControlAsignatura + " y nControl: " + nControl + " ya existe.");
                }
            }
        }

        if (registrosAgregados > 0) {
            JOptionPane.showMessageDialog(null, "Se han agregado " + registrosAgregados + " asignaturas al grupo exitosamente.");
        }

        // Actualizar la tabla de calificaciones con las asignaturas agregadas al grupo
        mostrarTabla(grupo, especialidad);
        habilitarDeshabilitar();

        // Verificar si hay registros de la asignatura "Inglés" y habilitar/deshabilitar el botón "btnAdminIngles"
        boolean hayEspecialidadIngles = verificarEspecialidadIngles(especialidad);
        btnAdminIngles.setEnabled(hayEspecialidadIngles);

    }//GEN-LAST:event_btnAgregarAsignaturasActionPerformed

    private void btnEliminarAsignaturasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarAsignaturasActionPerformed
        // Obtener el grupo y especialidad del JLabel txtGrupo y txtEspecialidad
        String grupo = txtGrupo.getText();
        String especialidad = txtEspecialidad.getText();

        // Obtener las asignaturas seleccionadas de la JList
        List<String> asignaturasSeleccionadas = ListAsignaturas.getSelectedValuesList();

        // Eliminar cada asignatura seleccionada del grupo en la tabla calificaciones
        int asignaturasEliminadas = 0;
        for (String asignatura : asignaturasSeleccionadas) {
            String nControlAsignatura = obtenerNControlAsignatura(asignatura);
            if (nControlAsignatura != null) {
                eliminarAsignaturaGrupo(grupo, nControlAsignatura);
                asignaturasEliminadas++;
            } else {
                JOptionPane.showMessageDialog(null, "Error al obtener el nControlAsignatura para la asignatura: " + asignatura);
            }
        }

        if (asignaturasEliminadas > 0) {
            JOptionPane.showMessageDialog(null, "Se han eliminado " + asignaturasEliminadas + " asignaturas del grupo exitosamente.");
        }

        // Actualizar la tabla de calificaciones después de eliminar las asignaturas
        mostrarTabla(grupo, especialidad);
        habilitarDeshabilitar();

        // Verificar si hay registros de la asignatura "Inglés" y habilitar/deshabilitar el botón "btnAdminIngles"
        boolean hayEspecialidadIngles = verificarEspecialidadIngles(especialidad);
        btnAdminIngles.setEnabled(hayEspecialidadIngles);
    }//GEN-LAST:event_btnEliminarAsignaturasActionPerformed

    void mostrarTabla(String grupo, String especialidad) {
        // Crear un DefaultTableModel personalizado
        DefaultTableModel modelo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Obtener el valor de la asignatura de la fila
                String asignatura = getValueAt(row, 3).toString().toLowerCase();

                // Verificar si la asignatura corresponde a inglés o alguna variación de la palabra
                boolean isIngles = asignatura.contains("ingles") || asignatura.contains("inglés");

                // Verificar si la especialidad es "Inglés"
                boolean isEspecialidadIngles = especialidad.equalsIgnoreCase("Ingles") || especialidad.equalsIgnoreCase("Inglés");

                // Permitir la edición solo en la columna de calificaciones para asignaturas que no sean inglés y no sean de especialidad "Inglés"
                return column == 4 && !isIngles && !isEspecialidadIngles;
            }
        };

        modelo.addColumn("nControl");
        modelo.addColumn("Nombre");
        modelo.addColumn("nControlAsignatura");
        modelo.addColumn("Asignatura");
        modelo.addColumn("Calificación");

        tablaAlumnosGrupo.setModel(modelo);

        String sql = "SELECT c.ncontrol, a.nombre, c.nControlAsignatura, asignaturas.asignatura, "
                + "COALESCE(ci.promedioIngles, c.calificacion) AS calificacion "
                + // Cambio aquí
                "FROM dbo.calificaciones c "
                + "INNER JOIN dbo.alumnos a ON c.ncontrol = a.ncontrol "
                + "INNER JOIN dbo.asignaturas asignaturas ON c.nControlAsignatura = asignaturas.nControlAsignatura "
                + "LEFT JOIN calificaciones_ingles ci ON c.ncontrol = ci.ncontrol AND c.grupo = ci.grupo AND c.ncontrolasignatura = ci.ncontrolasignatura "
                + // Nueva unión a la tabla calificaciones_ingles
                "WHERE c.grupo = ? AND a.estatus = 'ac' ORDER BY c.ncontrol";

        try {
            PreparedStatement statement = cn.prepareStatement(sql);

            // Obtener el valor del grupo del JLabel txtGrupo
            grupo = txtGrupo.getText();

            // Establecer el valor del parámetro grupo en la consulta
            statement.setString(1, grupo);

            ResultSet rs = statement.executeQuery();

            while (rs.next()) {
                String nControl = rs.getString("ncontrol");
                String nombre = rs.getString("nombre");
                String nControlAsignatura = rs.getString("nControlAsignatura");
                String asignatura = rs.getString("asignatura");
                String calificacion = rs.getString("calificacion");

                modelo.addRow(new Object[]{nControl, nombre, nControlAsignatura, asignatura, calificacion, especialidad});
            }
        } catch (SQLException e) {
            System.err.println(e);
            JOptionPane.showMessageDialog(null, "Error al cargar datos, contacte al administrador");
        }

        // Ajustar automáticamente el tamaño de las columnas según el contenido
        tablaAlumnosGrupo.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tablaAlumnosGrupo.getColumnModel().getColumn(0).setPreferredWidth(100);
        tablaAlumnosGrupo.getColumnModel().getColumn(1).setPreferredWidth(250);
        tablaAlumnosGrupo.getColumnModel().getColumn(2).setPreferredWidth(200);
        tablaAlumnosGrupo.getColumnModel().getColumn(3).setPreferredWidth(220);
        tablaAlumnosGrupo.getColumnModel().getColumn(4).setPreferredWidth(150);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        tablaAlumnosGrupo.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
    }

    // Método para aplicar el filtro
    public void aplicarFiltro() {
        String filtro = txtBuscar.getText().trim().toLowerCase();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) tablaAlumnosGrupo.getModel());
        tablaAlumnosGrupo.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter(filtro));
    }

    private void btnHabilitarAsignaturasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHabilitarAsignaturasActionPerformed
        habilitarDeshabilitar();
    }//GEN-LAST:event_btnHabilitarAsignaturasActionPerformed

    private void btnGenerarBoletaAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarBoletaAlumnoActionPerformed
        // Obtener el alumno seleccionado
        int filaSeleccionada = tablaAlumnosGrupo.getSelectedRow();

        if (filaSeleccionada != -1) {
            // Obtener los datos del alumno seleccionado
            String nombreAlumno = tablaAlumnosGrupo.getValueAt(filaSeleccionada, 1).toString();

            // Obtener la especialidad del grupo
            String especialidadGrupo = txtEspecialidad.getText().trim();

            if (especialidadGrupo.equalsIgnoreCase("Ingles") || especialidadGrupo.equalsIgnoreCase("Inglés")) {
                // Generar el documento PDF específico para la especialidad "Ingles" o "Inglés"
                generarBoletaEspecialidadIngles(nombreAlumno, especialidadGrupo);
            } else {
                // Generar el documento PDF utilizando el código existente
                generarBoletaNormal(nombreAlumno);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un alumno");
        }
    }

// Método para generar el documento PDF específico para la especialidad "Ingles" o "Inglés"
    private void generarBoletaEspecialidadIngles(String nombreAlumno, String especialidadGrupo) {
        int filaSeleccionada = tablaAlumnosGrupo.getSelectedRow();
        String nControlAsignatura = tablaAlumnosGrupo.getValueAt(filaSeleccionada, 2).toString();

// Construir la ruta completa para la carpeta del grupo, carpeta del alumno y la boleta del alumno
        String nombreGrupo = txtGrupo.getText().trim();
        String nombreUsuario = System.getProperty("user.name");
        String rutaDocumentos = "C:/Users/" + nombreUsuario + "/Documents";
        String rutaCarpetaBoletas = rutaDocumentos + "/IciibaBoletas/" + nombreGrupo;

// Verificar si la carpeta del grupo existe, si no, crearla
        File carpetaGrupo = new File(rutaCarpetaBoletas);
        if (!carpetaGrupo.exists()) {
            carpetaGrupo.mkdirs();
        }

// Obtener el nombre del alumno (puedes usar una columna específica de la tabla para obtenerlo)
        String rutaCarpetaAlumno = rutaCarpetaBoletas + "/" + nombreAlumno;

// Verificar si la carpeta del alumno existe, si no, crearla
        File carpetaAlumno = new File(rutaCarpetaAlumno);
        if (!carpetaAlumno.exists()) {
            carpetaAlumno.mkdirs();
        }

// Generar el nombre del archivo de la boleta
        String nombreArchivo = nombreAlumno + "_" + nControlAsignatura + ".pdf";
        String rutaBoletaAlumno = rutaCarpetaAlumno + "/" + nombreArchivo;

        // Generar la boleta de calificaciones del alumno
        try ( PDDocument documento = new PDDocument()) {
            PDRectangle pageSize = PDRectangle.LETTER; //Asignamos el tamaño de la hoja
            PDPage pagina = new PDPage(pageSize);
            documento.addPage(pagina);

            // Obtener el contenido de la página
            PDPageContentStream contenido = new PDPageContentStream(documento, pagina);
            //ENCABEZADO
            // Cargar la imagen del logo
            PDImageXObject imagenLogo = PDImageXObject.createFromFile("Imagenes/logoiciibapdf.png", documento);

            // Definir la posición y tamaño de la imagen del logo
            float posicionX = 50;
            float posicionY = 680;
            float anchoLogo = 86;
            float altoLogo = 112;

            // Insertar la imagen del logo en la página
            contenido.drawImage(imagenLogo, posicionX, posicionY, anchoLogo, altoLogo);

            // Definir la posición y estilo del texto
            float textPosX = 200; // Posición X del texto
            float textPosY = 750; // Posición Y del texto
            float fontSize = 18; // Tamaño de fuente del texto

            // Escribir el primer renglón del texto
            contenido.setFont(PDType1Font.HELVETICA_BOLD, fontSize);
            contenido.beginText();
            contenido.newLineAtOffset(textPosX, textPosY);
            contenido.showText("Instituto de Ciencias de la Información");
            contenido.endText();

            // Escribir el segundo renglón del texto
            contenido.setFont(PDType1Font.HELVETICA_BOLD, fontSize);
            contenido.beginText();
            contenido.newLineAtOffset(300, textPosY - fontSize); // Mover un poco hacia abajo
            contenido.showText("e Ingles del Bajío");
            contenido.endText();

            // Definir la posición y tamaño del texto "REPORTE DE EVALUACIÓN"
            float posicionTexto2X = 250; // Ajusta la posición X 
            float posicionTexto2Y = 700; // Ajusta la posición Y 
            float tamanoTexto2 = 16; // Ajusta el tamaño de la fuente 

            // Escribir el texto "REPORTE DE EVALUACIÓN" en mayúsculas sostenidas
            contenido.beginText();
            contenido.setFont(PDType1Font.HELVETICA_BOLD, tamanoTexto2);
            contenido.newLineAtOffset(posicionTexto2X, posicionTexto2Y);
            contenido.showText("REPORTE DE EVALUACIÓN");
            contenido.endText();

            // Obtener la fecha actual
            Date fechaActual = new Date();
            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String fecha = formatoFecha.format(fechaActual);

// Definir la posición y tamaño de la sección de fecha
            float fechaPosX = 450; // Ajusta la posición X
            float fechaPosY = 670; // Ajusta la posición Y
            float tamanoFecha = 12; // Ajusta el tamaño de la fuente

// Escribir la fecha
            contenido.beginText();
            contenido.setFont(PDType1Font.HELVETICA, tamanoFecha);
            contenido.newLineAtOffset(fechaPosX, fechaPosY);
            contenido.showText("Fecha: " + fecha);
            contenido.endText();

//FIN DE ENCABEZADO
//INICIO DE DATOS DEL ALUMNO
            //INICIO DE RECTANGULO CON BORDER REDONDOS
// Definir las dimensiones del cuadro
            float cuadroPosX = 50; // Posición X del cuadro
            float cuadroPosY = 550; // Posición Y del cuadro
            float cuadroWidth = 500; // Ancho del cuadro
            float cuadroHeight = 100; // Alto del cuadro
            //float borderRadius = 10; // Radio de los bordes redondeados
            // Dibujar el cuadro con bordes redondeados
            float borderRadius = 10; // Radio de los bordes redondeados
            float x = cuadroPosX;
            float y = cuadroPosY;
            float width = cuadroWidth;
            float height = cuadroHeight;

            contenido.setStrokingColor(Color.BLACK); // Color de borde
            contenido.setLineWidth(1); // Ancho de borde

            // Dibujar línea superior
            contenido.moveTo(x + borderRadius, y + height);
            contenido.curveTo(x + borderRadius, y + height, x, y + height, x, y + height - borderRadius);
            contenido.lineTo(x, y + borderRadius);
            contenido.curveTo(x, y + borderRadius, x, y, x + borderRadius, y);

            // Dibujar línea derecha
            contenido.lineTo(x + width - borderRadius, y);
            contenido.curveTo(x + width - borderRadius, y, x + width, y, x + width, y + borderRadius);
            contenido.lineTo(x + width, y + height - borderRadius);

            // Dibujar línea inferior
            contenido.curveTo(x + width, y + height - borderRadius, x + width, y + height, x + width - borderRadius, y + height);
            contenido.lineTo(x + borderRadius, y + height);

            // Dibujar línea izquierda
            contenido.lineTo(x + borderRadius, y);

            contenido.closePath();
            contenido.stroke();
            //FIN DE RECTANGULO CON BORDER REDONDOS
            // Definir la posición y estilo del título "Datos del alumno"
            float tituloPosX = 55 + 10; // Posición X del título dentro del cuadro
            float tituloPosY = 540 + 100 - 10; // Posición Y del título dentro del cuadro
            float tituloFontSize = 16; // Tamaño de fuente del título

            // Escribir el título "Datos del alumno"
            contenido.setFont(PDType1Font.HELVETICA_BOLD, tituloFontSize);
            contenido.beginText();
            contenido.newLineAtOffset(tituloPosX, tituloPosY);
            contenido.showText("Datos del alumno:");
            contenido.endText();

            // Definir la posición y estilo de los datos del alumno
            float datosPosX = 150; // Posición X de los datos
            float datosPosY = tituloPosY - tituloFontSize - 10; // Posición Y de los datos
            float datosFontSize = 12; // Tamaño de fuente de los datos

            // Escribir el nombre del alumno
            contenido.setFont(PDType1Font.HELVETICA_BOLD, datosFontSize); // Establecer fuente negrita
            contenido.beginText();
            contenido.newLineAtOffset(datosPosX, datosPosY);
            contenido.showText("Nombre:");
            contenido.setFont(PDType1Font.HELVETICA, datosFontSize); // Establecer fuente normal
            contenido.showText(" " + nombreAlumno);
            contenido.endText();

            // Escribir el grupo
            String grupo = txtGrupo.getText(); // Aquí debes obtener el grupo del alumno
            contenido.setFont(PDType1Font.HELVETICA_BOLD, datosFontSize); // Establecer fuente negrita
            contenido.beginText();
            contenido.newLineAtOffset(datosPosX, datosPosY - datosFontSize - 5);
            contenido.showText("Grupo:");
            contenido.setFont(PDType1Font.HELVETICA, datosFontSize); // Establecer fuente normal
            contenido.showText(" " + grupo);
            contenido.endText();

            String nControlAlumno = tablaAlumnosGrupo.getValueAt(filaSeleccionada, 0).toString();
            float datosPosX2 = 250; // Nueva posición X para el número de control
            contenido.setFont(PDType1Font.HELVETICA_BOLD, datosFontSize); // Establecer fuente negrita
            contenido.beginText();
            contenido.newLineAtOffset(datosPosX2, datosPosY - datosFontSize - 5);
            contenido.showText("Numero de control:");
            contenido.setFont(PDType1Font.HELVETICA, datosFontSize); // Establecer fuente normal
            contenido.showText(" " + nControlAlumno);
            contenido.endText();
            // Escribir la especialidad del grupo
            String especialidad = txtEspecialidad.getText(); // Aquí debes obtener la especialidad del grupo
            contenido.setFont(PDType1Font.HELVETICA_BOLD, datosFontSize); // Establecer fuente negrita
            contenido.beginText();
            contenido.newLineAtOffset(datosPosX, datosPosY - (datosFontSize * 2) - 10);
            contenido.showText("Especialidad del grupo:");
            contenido.setFont(PDType1Font.HELVETICA, datosFontSize); // Establecer fuente normal
            contenido.showText(" " + especialidad);
            contenido.endText();

//FIN DE DATOS DEL ALUMNO
//INICIO DE TABLA DE ASIGNATURAS Y CALIFICACIONES
            // Definir la posición y tamaño de la sección de asignaturas y calificaciones
            float sectionPosX = 50;  // Posición X de la sección
            float sectionPosY = 500; // Posición Y de la sección
            float sectionWidth = 300; // Ancho de la sección
            String nControl = tablaAlumnosGrupo.getValueAt(filaSeleccionada, 0).toString();
            //String nControlAsignatura = tablaAlumnosGrupo.getValueAt(filaSeleccionada, 2).toString();

            // Obtener los datos de las asignaturas y calificaciones desde la base de datos
            // Obtener los datos de las asignaturas y calificaciones desde la base de datos
            //List<String> asignaturas = new ArrayList<>();
            List<CalificacionesIngles> calificacionesList = new ArrayList<>();

            try {
                System.out.println("nControl: " + nControl);
                System.out.println("grupo: " + grupo);

                // Ejecutar la consulta para obtener los datos adicionales
                String query = "SELECT ncontrolasignatura, speaking, reading, listening, writing, use_of_english, promedioIngles "
                        + "FROM dbo.calificaciones_ingles "
                        + "WHERE nControl = ? AND ncontrolasignatura = ? AND grupo = ?";

                try ( Connection connection = cn;  PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                    preparedStatement.setString(1, nControl);
                    preparedStatement.setString(2, nControlAsignatura);
                    preparedStatement.setString(3, grupo);

                    try ( ResultSet resultSet = preparedStatement.executeQuery()) {
                        if (resultSet.next()) {
                            // Crear un objeto CalificacionesIngles y establecer los valores
                            CalificacionesIngles calificacion = new CalificacionesIngles(
                                    resultSet.getString("ncontrolasignatura"),
                                    resultSet.getString("speaking"),
                                    resultSet.getString("reading"),
                                    resultSet.getString("listening"),
                                    resultSet.getString("writing"),
                                    resultSet.getString("use_of_english"),
                                    resultSet.getString("promedioIngles"),
                                    nControlAsignatura // Utilizar nControlAsignatura
                            );

                            calificacionesList.add(calificacion);
                        } else {
                            JOptionPane.showMessageDialog(null, "No se encontraron calificaciones para el alumno y asignatura seleccionados.");
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error al obtener los datos de calificaciones "
                        + "en inglés.", "Error de base de datos", JOptionPane.ERROR_MESSAGE);
                return; // Evitar continuar con el proceso si hay errores en la obtención de datos
            }

            // Definir la posición inicial de la sección
            float currentY = sectionPosY;

// Escribir las asignaturas y calificaciones en el PDF
            for (CalificacionesIngles calificacion : calificacionesList) {
                String asignatura = calificacion.getAsignatura();
                String speaking = calificacion.getSpeaking();
                String reading = calificacion.getReading();
                String listening = calificacion.getListening();
                String writing = calificacion.getWriting();
                String useOfEnglish = calificacion.getUseOfEnglish();
                String promedioIngles = calificacion.getPromedioIngles();

                // Calcular las coordenadas de la línea actual
                float xSection = sectionPosX;

                // Escribir la asignatura
                contenido.beginText();
                contenido.setFont(PDType1Font.HELVETICA, 12);
                contenido.newLineAtOffset(xSection, currentY);
                contenido.showText("Asignatura: " + asignatura);
                contenido.endText();

                // Ajustar coordenada Y para las líneas de calificación
                float yCalificaciones = currentY - 15; // Espacio vertical entre asignatura y calificaciones

                // Ajustar coordenadas X para las líneas de calificación
                float xCalificaciones = xSection; // Espacio horizontal desde la asignatura

                // Escribir las calificaciones utilizando las listas correspondientes
                contenido.beginText();
                contenido.setFont(PDType1Font.HELVETICA, 11);
                contenido.newLineAtOffset(xCalificaciones, yCalificaciones);
                contenido.showText("Speaking: " + speaking + "   Reading: " + reading
                        + "   Listening: " + listening + "   Writing: " + writing
                        + "   Use of English: " + useOfEnglish
                        + "   Promedio Inglés: " + promedioIngles);
                contenido.endText();

                // Ajustar coordenada Y para la siguiente asignatura
                currentY -= 30; // Espacio vertical entre asignaturas
            }

// Actualizar la posición Y actual
            currentY -= 20;
//FIN DE TABLA DE ASIGNATURAS Y CALIFICACIONES

            // Agregar gráfico de barras con JFreeChart
            for (CalificacionesIngles calificacion : calificacionesList) {
                JFreeChart barChart = createBarChart(calificacion);
                int chartWidth = 500;
                int chartHeight =400;

                // Generar un nombre único para el archivo PNG usando el número de control de la asignatura
                String chartImageFileName = "chart_image_" + calificacion.getAsignatura() + ".png";
                File chartImageFile = new File(chartImageFileName);

                try {
                    ChartUtilities.saveChartAsPNG(chartImageFile, barChart, chartWidth, chartHeight);
                    // Cargar la imagen del gráfico
                    PDImageXObject chartImage = PDImageXObject.createFromFile(chartImageFile.getAbsolutePath(), documento);

                    // Agregar la imagen del gráfico al documento PDF
                    float chartPosX = 50;
                    float chartPosY = currentY - chartHeight - 20; // Espacio vertical entre la tabla y el gráfico
                    contenido.drawImage(chartImage, chartPosX, chartPosY, chartWidth, chartHeight);

                    // Resto del código después de agregar la imagen al PDF (si es necesario)
                } catch (IOException e) {
                    e.printStackTrace();
                    // Manejar el error si ocurre algún problema al guardar la imagen del gráfico
                }
            }

            // Cerrar el contenido de la página y guardar el documento
            contenido.close();
            // Guardar el documento como archivo PDF
            documento.save(rutaBoletaAlumno);
//                documento.close();
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al generar la boleta de calificaciones del alumno");
        } finally {
            if (cn != null) {
                try {
                    cn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }

        JOptionPane.showMessageDialog(null, "Boleta de calificaciones generada: " + rutaBoletaAlumno);

        AdministracionGrupos administracionGrupos = new AdministracionGrupos(txtGrupo.getText().toString(), txtEspecialidad.getText().toString());
        administracionGrupos.setVisible(true);
        dispose();
    }

    private JFreeChart createBarChart(CalificacionesIngles calificacion) {
        // Crear un dataset para el gráfico
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.addValue(Double.parseDouble(calificacion.getSpeaking()), "Calificaciones", "Speaking");
        dataset.addValue(Double.parseDouble(calificacion.getReading()), "Calificaciones", "Reading");
        dataset.addValue(Double.parseDouble(calificacion.getListening()), "Calificaciones", "Listening");
        dataset.addValue(Double.parseDouble(calificacion.getWriting()), "Calificaciones", "Writing");
        dataset.addValue(Double.parseDouble(calificacion.getUseOfEnglish()), "Calificaciones", "Use of English");
        dataset.addValue(Double.parseDouble(calificacion.getPromedioIngles()), "Calificaciones", "Promedio Inglés");

        // Crear el gráfico de barras
        JFreeChart barChart = ChartFactory.createBarChart(
                "English grades", // Título del gráfico
                "Skills", // Etiqueta del eje X
                "Grades", // Etiqueta del eje Y
                dataset, // Dataset
                PlotOrientation.VERTICAL, // Orientación del gráfico
                true, // Mostrar leyenda
                false, // Mostrar herramientas de zoom
                false // No mostrar URLs
        );

        // Personalizar el renderizador de las barras
        CategoryPlot plot = (CategoryPlot) barChart.getPlot();
        CategoryItemRenderer renderer = plot.getRenderer();
        BarRenderer barRenderer = (BarRenderer) renderer;
        barRenderer.setBarPainter(new StandardBarPainter());

        // Personalizar los colores de las barras
        barRenderer.setSeriesPaint(0, new Color(156, 22, 31));
        barRenderer.setSeriesPaint(1, Color.green);
        barRenderer.setSeriesPaint(2, Color.red);
        barRenderer.setSeriesPaint(3, Color.orange);
        barRenderer.setSeriesPaint(4, Color.pink);

        // Mostrar los valores encima de las barras
        barRenderer.setDefaultItemLabelGenerator(new StandardCategoryItemLabelGenerator());
        barRenderer.setDefaultItemLabelsVisible(true);

        // Ajustar la posición de las etiquetas de los valores
        barRenderer.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BOTTOM_CENTER
        ));

        return barChart;
    }

// Método para generar el documento PDF utilizando el código existente
    private void generarBoletaNormal(String nombreAlumno) {
        int filaSeleccionada = tablaAlumnosGrupo.getSelectedRow();
        // Generar el nombre del archivo de la boleta
        String nombreArchivo = nombreAlumno + ".pdf";

        // Construir la ruta completa para la carpeta del grupo y la boleta del alumno
        String nombreGrupo = txtGrupo.getText().trim(); // Obtener el nombre del grupo seleccionado
        String nombreUsuario = System.getProperty("user.name");
        String rutaDocumentos = "C:/Users/" + nombreUsuario + "/Documents";
        String rutaCarpetaBoletas = rutaDocumentos + "/IciibaBoletas/" + nombreGrupo;
        String rutaBoletaAlumno = rutaCarpetaBoletas + "/" + nombreArchivo;

        // Verificar si la carpeta del grupo existe, si no, crearla
        File carpetaGrupo = new File(rutaCarpetaBoletas);
        if (!carpetaGrupo.exists()) {
            carpetaGrupo.mkdirs();
        }

        // Generar la boleta de calificaciones del alumno
        try ( PDDocument documento = new PDDocument()) {
            PDRectangle pageSize = PDRectangle.LETTER; //Asignamos el tamaño de la hoja
            PDPage pagina = new PDPage(pageSize);
            documento.addPage(pagina);

            // Obtener el contenido de la página
            PDPageContentStream contenido = new PDPageContentStream(documento, pagina);
            //ENCABEZADO
            // Cargar la imagen del logo
            PDImageXObject imagenLogo = PDImageXObject.createFromFile("Imagenes/logoiciibapdf.png", documento);

            // Definir la posición y tamaño de la imagen del logo
            float posicionX = 50;
            float posicionY = 680;
            float anchoLogo = 86;
            float altoLogo = 112;

            // Insertar la imagen del logo en la página
            contenido.drawImage(imagenLogo, posicionX, posicionY, anchoLogo, altoLogo);

            // Definir la posición y estilo del texto
            float textPosX = 200; // Posición X del texto
            float textPosY = 750; // Posición Y del texto
            float fontSize = 18; // Tamaño de fuente del texto

            // Escribir el primer renglón del texto
            contenido.setFont(PDType1Font.HELVETICA_BOLD, fontSize);
            contenido.beginText();
            contenido.newLineAtOffset(textPosX, textPosY);
            contenido.showText("Instituto de Ciencias de la Información");
            contenido.endText();

            // Escribir el segundo renglón del texto
            contenido.setFont(PDType1Font.HELVETICA_BOLD, fontSize);
            contenido.beginText();
            contenido.newLineAtOffset(300, textPosY - fontSize); // Mover un poco hacia abajo
            contenido.showText("e Ingles del Bajío");
            contenido.endText();

            // Definir la posición y tamaño del texto "REPORTE DE EVALUACIÓN"
            float posicionTexto2X = 250; // Ajusta la posición X 
            float posicionTexto2Y = 700; // Ajusta la posición Y 
            float tamanoTexto2 = 16; // Ajusta el tamaño de la fuente 

            // Escribir el texto "REPORTE DE EVALUACIÓN" en mayúsculas sostenidas
            contenido.beginText();
            contenido.setFont(PDType1Font.HELVETICA_BOLD, tamanoTexto2);
            contenido.newLineAtOffset(posicionTexto2X, posicionTexto2Y);
            contenido.showText("REPORTE DE EVALUACIÓN");
            contenido.endText();

            // Obtener la fecha actual
            Date fechaActual = new Date();
            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String fecha = formatoFecha.format(fechaActual);

// Definir la posición y tamaño de la sección de fecha
            float fechaPosX = 450; // Ajusta la posición X
            float fechaPosY = 670; // Ajusta la posición Y
            float tamanoFecha = 12; // Ajusta el tamaño de la fuente

// Escribir la fecha
            contenido.beginText();
            contenido.setFont(PDType1Font.HELVETICA, tamanoFecha);
            contenido.newLineAtOffset(fechaPosX, fechaPosY);
            contenido.showText("Fecha: " + fecha);
            contenido.endText();

//FIN DE ENCABEZADO
//INICIO DE DATOS DEL ALUMNO
            //INICIO DE RECTANGULO CON BORDER REDONDOS
// Definir las dimensiones del cuadro
            float cuadroPosX = 50; // Posición X del cuadro
            float cuadroPosY = 550; // Posición Y del cuadro
            float cuadroWidth = 500; // Ancho del cuadro
            float cuadroHeight = 100; // Alto del cuadro
            //float borderRadius = 10; // Radio de los bordes redondeados
            // Dibujar el cuadro con bordes redondeados
            float borderRadius = 10; // Radio de los bordes redondeados
            float x = cuadroPosX;
            float y = cuadroPosY;
            float width = cuadroWidth;
            float height = cuadroHeight;

            contenido.setStrokingColor(Color.BLACK); // Color de borde
            contenido.setLineWidth(1); // Ancho de borde

            // Dibujar línea superior
            contenido.moveTo(x + borderRadius, y + height);
            contenido.curveTo(x + borderRadius, y + height, x, y + height, x, y + height - borderRadius);
            contenido.lineTo(x, y + borderRadius);
            contenido.curveTo(x, y + borderRadius, x, y, x + borderRadius, y);

            // Dibujar línea derecha
            contenido.lineTo(x + width - borderRadius, y);
            contenido.curveTo(x + width - borderRadius, y, x + width, y, x + width, y + borderRadius);
            contenido.lineTo(x + width, y + height - borderRadius);

            // Dibujar línea inferior
            contenido.curveTo(x + width, y + height - borderRadius, x + width, y + height, x + width - borderRadius, y + height);
            contenido.lineTo(x + borderRadius, y + height);

            // Dibujar línea izquierda
            contenido.lineTo(x + borderRadius, y);

            contenido.closePath();
            contenido.stroke();
            //FIN DE RECTANGULO CON BORDER REDONDOS
            // Definir la posición y estilo del título "Datos del alumno"
            float tituloPosX = 55 + 10; // Posición X del título dentro del cuadro
            float tituloPosY = 540 + 100 - 10; // Posición Y del título dentro del cuadro
            float tituloFontSize = 16; // Tamaño de fuente del título

            // Escribir el título "Datos del alumno"
            contenido.setFont(PDType1Font.HELVETICA_BOLD, tituloFontSize);
            contenido.beginText();
            contenido.newLineAtOffset(tituloPosX, tituloPosY);
            contenido.showText("Datos del alumno:");
            contenido.endText();

            // Definir la posición y estilo de los datos del alumno
            float datosPosX = 150; // Posición X de los datos
            float datosPosY = tituloPosY - tituloFontSize - 10; // Posición Y de los datos
            float datosFontSize = 12; // Tamaño de fuente de los datos

            // Escribir el nombre del alumno
            contenido.setFont(PDType1Font.HELVETICA_BOLD, datosFontSize); // Establecer fuente negrita
            contenido.beginText();
            contenido.newLineAtOffset(datosPosX, datosPosY);
            contenido.showText("Nombre:");
            contenido.setFont(PDType1Font.HELVETICA, datosFontSize); // Establecer fuente normal
            contenido.showText(" " + nombreAlumno);
            contenido.endText();

            // Escribir el grupo
            String grupo = txtGrupo.getText(); // Aquí debes obtener el grupo del alumno
            contenido.setFont(PDType1Font.HELVETICA_BOLD, datosFontSize); // Establecer fuente negrita
            contenido.beginText();
            contenido.newLineAtOffset(datosPosX, datosPosY - datosFontSize - 5);
            contenido.showText("Grupo:");
            contenido.setFont(PDType1Font.HELVETICA, datosFontSize); // Establecer fuente normal
            contenido.showText(" " + grupo);
            contenido.endText();

            String nControlAlumno = tablaAlumnosGrupo.getValueAt(filaSeleccionada, 0).toString();
            float datosPosX2 = 250; // Nueva posición X para el número de control
            contenido.setFont(PDType1Font.HELVETICA_BOLD, datosFontSize); // Establecer fuente negrita
            contenido.beginText();
            contenido.newLineAtOffset(datosPosX2, datosPosY - datosFontSize - 5);
            contenido.showText("Numero de control:");
            contenido.setFont(PDType1Font.HELVETICA, datosFontSize); // Establecer fuente normal
            contenido.showText(" " + nControlAlumno);
            contenido.endText();
            // Escribir la especialidad del grupo
            String especialidad = txtEspecialidad.getText(); // Aquí debes obtener la especialidad del grupo
            contenido.setFont(PDType1Font.HELVETICA_BOLD, datosFontSize); // Establecer fuente negrita
            contenido.beginText();
            contenido.newLineAtOffset(datosPosX, datosPosY - (datosFontSize * 2) - 10);
            contenido.showText("Especialidad del grupo:");
            contenido.setFont(PDType1Font.HELVETICA, datosFontSize); // Establecer fuente normal
            contenido.showText(" " + especialidad);
            contenido.endText();

//FIN DE DATOS DEL ALUMNO
//INICIO DE TABLA DE ASIGNATURAS Y CALIFICACIONES
            // Definir la posición y tamaño de la sección de asignaturas y calificaciones
            float sectionPosX = 50;  // Posición X de la sección
            float sectionPosY = 500; // Posición Y de la sección
            float sectionWidth = 300; // Ancho de la sección
            String nControl = tablaAlumnosGrupo.getValueAt(filaSeleccionada, 0).toString();

            // Obtener los datos de las asignaturas y calificaciones desde la base de datos
            List<String> asignaturas = new ArrayList<>();
            List<String> calificaciones = new ArrayList<>();

            for (int i = 0; i < tablaAlumnosGrupo.getRowCount(); i++) {
                String nControlFila = tablaAlumnosGrupo.getValueAt(i, 0).toString();
                if (nControlFila.equals(nControl)) {
                    String asignatura = tablaAlumnosGrupo.getValueAt(i, 3).toString();
                    String calificacion = tablaAlumnosGrupo.getValueAt(i, 4) != null ? tablaAlumnosGrupo.getValueAt(i, 4).toString() : "";
                    asignaturas.add(asignatura);
                    calificaciones.add(calificacion);
                }
            }

            // Definir la posición inicial de la sección
            float currentY = sectionPosY;

            // Establecer el color del texto de la sección
            contenido.setStrokingColor(Color.BLACK);

            // Verificar si hay calificaciones faltantes
            boolean calificacionesFaltantes = calificaciones.contains("");

            // Escribir las asignaturas y calificaciones en el PDF
            if (!calificacionesFaltantes) {
                // Escribir los encabezados de la tabla
                contenido.beginText();
                contenido.setFont(PDType1Font.HELVETICA_BOLD, 12);
                contenido.newLineAtOffset(sectionPosX, currentY);
                contenido.showText("Asignatura");
                contenido.newLineAtOffset(sectionWidth * 0.5f, 0);
                contenido.showText("Calificación");
                contenido.endText();

                currentY -= 20; // Espacio adicional después de los encabezados

                // Escribir los datos de las asignaturas y calificaciones
                for (int i = 0; i < asignaturas.size(); i++) {
                    String asignatura = asignaturas.get(i);
                    String calificacion = calificaciones.get(i);

                    // Calcular las coordenadas de la línea actual
                    float xSection = sectionPosX;
                    float ySection = currentY;

                    // Escribir la asignatura
                    contenido.beginText();
                    contenido.setFont(PDType1Font.HELVETICA, 12);
                    contenido.newLineAtOffset(xSection, ySection);
                    contenido.showText(asignatura);
                    contenido.endText();

                    // Escribir la calificación
                    contenido.beginText();
                    contenido.setFont(PDType1Font.HELVETICA, 12);
                    contenido.newLineAtOffset(sectionWidth * 0.7f, ySection);
                    contenido.showText(calificacion);
                    contenido.endText();

                    // Calcular las coordenadas de la siguiente línea
                    currentY -= 20;
                }
            } else {
                // Mostrar una alerta o mensaje al usuario
                JOptionPane.showMessageDialog(null, "No se puede generar la boleta. Asigne una calificación al alumno seleccionado.", "Calificaciones faltantes", JOptionPane.WARNING_MESSAGE);
            }

            // Actualizar la posición Y actual
            currentY -= 20; // Espacio adicional después de la sección de
//FIN DE TABLA DE ASIGNATURAS Y CALIFICACIONES

            // Cerrar el contenido de la página y guardar el documento
            contenido.close();
            // Guardar el documento como archivo PDF
            documento.save(rutaBoletaAlumno);
//                documento.close();
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al generar la boleta de calificaciones del alumno");
        }

        JOptionPane.showMessageDialog(null, "Boleta de calificaciones generada: " + rutaBoletaAlumno);

    }//GEN-LAST:event_btnGenerarBoletaAlumnoActionPerformed

    private void btnGenerarBoletasTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarBoletasTodosActionPerformed
        // Verificar si hay alumnos seleccionados en la tabla
        if (tablaAlumnosGrupo.getRowCount() > 0) {
            // Construir la ruta completa para la carpeta del grupo
            String nombreGrupo = txtGrupo.getText().trim(); // Obtener el nombre del grupo seleccionado
            String nombreUsuario = System.getProperty("user.name");
            String rutaDocumentos = "C:/Users/" + nombreUsuario + "/Documents";
            String rutaCarpetaBoletas = rutaDocumentos + "/IciibaBoletas/" + nombreGrupo;

            // Verificar si la carpeta del grupo existe, si no, crearla
            File carpetaGrupo = new File(rutaCarpetaBoletas);
            if (!carpetaGrupo.exists()) {
                carpetaGrupo.mkdirs();
            }
            // Declarar la variable filaSeleccionada antes del bucle
            int filaSeleccionada;
            // Generar la boleta de calificaciones para cada alumno
            for (filaSeleccionada = 0; filaSeleccionada < tablaAlumnosGrupo.getRowCount(); filaSeleccionada++) {
                // Obtener los datos del alumno actual
                String nombreAlumno = tablaAlumnosGrupo.getValueAt(filaSeleccionada, 1).toString();
                String nombreArchivo = nombreAlumno + ".pdf";
                String rutaBoletaAlumno = rutaCarpetaBoletas + "/" + nombreArchivo;

                // Generar la boleta de calificaciones del alumno
                try ( PDDocument documento = new PDDocument()) {
                    PDRectangle pageSize = PDRectangle.LETTER; //Asignamos el tamaño de la hoja
                    PDPage pagina = new PDPage(pageSize);
                    documento.addPage(pagina);

                    // Obtener el contenido de la página
                    PDPageContentStream contenido = new PDPageContentStream(documento, pagina);
//ENCABEZADO
                    // Cargar la imagen del logo
                    PDImageXObject imagenLogo = PDImageXObject.createFromFile("Imagenes/logoiciibapdf.png", documento);

                    // Definir la posición y tamaño de la imagen del logo
                    float posicionX = 50;
                    float posicionY = 680;
                    float anchoLogo = 86;
                    float altoLogo = 112;

                    // Insertar la imagen del logo en la página
                    contenido.drawImage(imagenLogo, posicionX, posicionY, anchoLogo, altoLogo);

                    // Definir la posición y estilo del texto
                    float textPosX = 200; // Posición X del texto
                    float textPosY = 750; // Posición Y del texto
                    float fontSize = 18; // Tamaño de fuente del texto

                    // Escribir el primer renglón del texto
                    contenido.setFont(PDType1Font.HELVETICA_BOLD, fontSize);
                    contenido.beginText();
                    contenido.newLineAtOffset(textPosX, textPosY);
                    contenido.showText("Instituto de Ciencias de la Información");
                    contenido.endText();

                    // Escribir el segundo renglón del texto
                    contenido.setFont(PDType1Font.HELVETICA_BOLD, fontSize);
                    contenido.beginText();
                    contenido.newLineAtOffset(300, textPosY - fontSize); // Mover un poco hacia abajo
                    contenido.showText("e Ingles del Bajío");
                    contenido.endText();

                    // Definir la posición y tamaño del texto "REPORTE DE EVALUACIÓN"
                    float posicionTexto2X = 250; // Ajusta la posición X 
                    float posicionTexto2Y = 700; // Ajusta la posición Y 
                    float tamanoTexto2 = 16; // Ajusta el tamaño de la fuente 

                    // Escribir el texto "REPORTE DE EVALUACIÓN" en mayúsculas sostenidas
                    contenido.beginText();
                    contenido.setFont(PDType1Font.HELVETICA_BOLD, tamanoTexto2);
                    contenido.newLineAtOffset(posicionTexto2X, posicionTexto2Y);
                    contenido.showText("REPORTE DE EVALUACIÓN");
                    contenido.endText();

                    // Obtener la fecha actual
                    Date fechaActual = new Date();
                    SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
                    String fecha = formatoFecha.format(fechaActual);

// Definir la posición y tamaño de la sección de fecha
                    float fechaPosX = 450; // Ajusta la posición X
                    float fechaPosY = 670; // Ajusta la posición Y
                    float tamanoFecha = 12; // Ajusta el tamaño de la fuente

// Escribir la fecha
                    contenido.beginText();
                    contenido.setFont(PDType1Font.HELVETICA, tamanoFecha);
                    contenido.newLineAtOffset(fechaPosX, fechaPosY);
                    contenido.showText("Fecha: " + fecha);
                    contenido.endText();

//FIN DE ENCABEZADO
//INICIO DE DATOS DEL ALUMNO
                    //INICIO DE RECTANGULO CON BORDER REDONDOS
// Definir las dimensiones del cuadro
                    float cuadroPosX = 50; // Posición X del cuadro
                    float cuadroPosY = 550; // Posición Y del cuadro
                    float cuadroWidth = 500; // Ancho del cuadro
                    float cuadroHeight = 100; // Alto del cuadro
                    //float borderRadius = 10; // Radio de los bordes redondeados
                    // Dibujar el cuadro con bordes redondeados
                    float borderRadius = 10; // Radio de los bordes redondeados
                    float x = cuadroPosX;
                    float y = cuadroPosY;
                    float width = cuadroWidth;
                    float height = cuadroHeight;

                    contenido.setStrokingColor(Color.BLACK); // Color de borde
                    contenido.setLineWidth(1); // Ancho de borde

                    // Dibujar línea superior
                    contenido.moveTo(x + borderRadius, y + height);
                    contenido.curveTo(x + borderRadius, y + height, x, y + height, x, y + height - borderRadius);
                    contenido.lineTo(x, y + borderRadius);
                    contenido.curveTo(x, y + borderRadius, x, y, x + borderRadius, y);

                    // Dibujar línea derecha
                    contenido.lineTo(x + width - borderRadius, y);
                    contenido.curveTo(x + width - borderRadius, y, x + width, y, x + width, y + borderRadius);
                    contenido.lineTo(x + width, y + height - borderRadius);

                    // Dibujar línea inferior
                    contenido.curveTo(x + width, y + height - borderRadius, x + width, y + height, x + width - borderRadius, y + height);
                    contenido.lineTo(x + borderRadius, y + height);

                    // Dibujar línea izquierda
                    contenido.lineTo(x + borderRadius, y);

                    contenido.closePath();
                    contenido.stroke();
                    //FIN DE RECTANGULO CON BORDER REDONDOS
                    // Definir la posición y estilo del título "Datos del alumno"
                    float tituloPosX = 55 + 10; // Posición X del título dentro del cuadro
                    float tituloPosY = 540 + 100 - 10; // Posición Y del título dentro del cuadro
                    float tituloFontSize = 16; // Tamaño de fuente del título

                    // Escribir el título "Datos del alumno"
                    contenido.setFont(PDType1Font.HELVETICA_BOLD, tituloFontSize);
                    contenido.beginText();
                    contenido.newLineAtOffset(tituloPosX, tituloPosY);
                    contenido.showText("Datos del alumno:");
                    contenido.endText();

                    // Definir la posición y estilo de los datos del alumno
                    float datosPosX = 150; // Posición X de los datos
                    float datosPosY = tituloPosY - tituloFontSize - 10; // Posición Y de los datos
                    float datosFontSize = 12; // Tamaño de fuente de los datos

                    // Escribir el nombre del alumno
                    contenido.setFont(PDType1Font.HELVETICA_BOLD, datosFontSize); // Establecer fuente negrita
                    contenido.beginText();
                    contenido.newLineAtOffset(datosPosX, datosPosY);
                    contenido.showText("Nombre:");
                    contenido.setFont(PDType1Font.HELVETICA, datosFontSize); // Establecer fuente normal
                    contenido.showText(" " + nombreAlumno);
                    contenido.endText();

                    // Escribir el grupo
                    String grupo = txtGrupo.getText(); // Aquí debes obtener el grupo del alumno
                    contenido.setFont(PDType1Font.HELVETICA_BOLD, datosFontSize); // Establecer fuente negrita
                    contenido.beginText();
                    contenido.newLineAtOffset(datosPosX, datosPosY - datosFontSize - 5);
                    contenido.showText("Grupo:");
                    contenido.setFont(PDType1Font.HELVETICA, datosFontSize); // Establecer fuente normal
                    contenido.showText(" " + grupo);
                    contenido.endText();

                    String nControlAlumno = tablaAlumnosGrupo.getValueAt(filaSeleccionada, 0).toString();
                    float datosPosX2 = 250; // Nueva posición X para el número de control
                    contenido.setFont(PDType1Font.HELVETICA_BOLD, datosFontSize); // Establecer fuente negrita
                    contenido.beginText();
                    contenido.newLineAtOffset(datosPosX2, datosPosY - datosFontSize - 5);
                    contenido.showText("Numero de control:");
                    contenido.setFont(PDType1Font.HELVETICA, datosFontSize); // Establecer fuente normal
                    contenido.showText(" " + nControlAlumno);
                    contenido.endText();
                    // Escribir la especialidad del grupo
                    String especialidad = txtEspecialidad.getText(); // Aquí debes obtener la especialidad del grupo
                    contenido.setFont(PDType1Font.HELVETICA_BOLD, datosFontSize); // Establecer fuente negrita
                    contenido.beginText();
                    contenido.newLineAtOffset(datosPosX, datosPosY - (datosFontSize * 2) - 10);
                    contenido.showText("Especialidad del grupo:");
                    contenido.setFont(PDType1Font.HELVETICA, datosFontSize); // Establecer fuente normal
                    contenido.showText(" " + especialidad);
                    contenido.endText();

//FIN DE DATOS DEL ALUMNO
//INICIO DE TABLA DE ASIGNATURAS Y CALIFICACIONES
                    // Definir la posición y tamaño de la sección de asignaturas y calificaciones
                    float sectionPosX = 50;  // Posición X de la sección
                    float sectionPosY = 500; // Posición Y de la sección
                    float sectionWidth = 300; // Ancho de la sección
                    String nControl = tablaAlumnosGrupo.getValueAt(filaSeleccionada, 0).toString();

                    // Obtener los datos de las asignaturas y calificaciones desde la base de datos
                    List<String> asignaturas = new ArrayList<>();
                    List<String> calificaciones = new ArrayList<>();

                    for (int i = 0; i < tablaAlumnosGrupo.getRowCount(); i++) {
                        String nControlFila = tablaAlumnosGrupo.getValueAt(i, 0).toString();
                        if (nControlFila.equals(nControl)) {
                            String asignatura = tablaAlumnosGrupo.getValueAt(i, 3).toString();
                            String calificacion = tablaAlumnosGrupo.getValueAt(i, 4) != null ? tablaAlumnosGrupo.getValueAt(i, 4).toString() : "";
                            asignaturas.add(asignatura);
                            calificaciones.add(calificacion);
                        }
                    }

                    // Definir la posición inicial de la sección
                    float currentY = sectionPosY;

                    // Establecer el color del texto de la sección
                    contenido.setStrokingColor(Color.BLACK);

                    // Verificar si hay calificaciones faltantes
                    boolean calificacionesFaltantes = calificaciones.contains("");

                    // Escribir las asignaturas y calificaciones en el PDF
                    if (!calificacionesFaltantes) {
                        // Escribir los encabezados de la tabla
                        contenido.beginText();
                        contenido.setFont(PDType1Font.HELVETICA_BOLD, 12);
                        contenido.newLineAtOffset(sectionPosX, currentY);
                        contenido.showText("Asignatura");
                        contenido.newLineAtOffset(sectionWidth * 0.5f, 0);
                        contenido.showText("Calificación");
                        contenido.endText();

                        currentY -= 20; // Espacio adicional después de los encabezados

                        // Escribir los datos de las asignaturas y calificaciones
                        for (int i = 0; i < asignaturas.size(); i++) {
                            String asignatura = asignaturas.get(i);
                            String calificacion = calificaciones.get(i);

                            // Calcular las coordenadas de la línea actual
                            float xSection = sectionPosX;
                            float ySection = currentY;

                            // Escribir la asignatura
                            contenido.beginText();
                            contenido.setFont(PDType1Font.HELVETICA, 12);
                            contenido.newLineAtOffset(xSection, ySection);
                            contenido.showText(asignatura);
                            contenido.endText();

                            // Escribir la calificación
                            contenido.beginText();
                            contenido.setFont(PDType1Font.HELVETICA, 12);
                            contenido.newLineAtOffset(sectionWidth * 0.7f, ySection);
                            contenido.showText(calificacion);
                            contenido.endText();

                            // Calcular las coordenadas de la siguiente línea
                            currentY -= 20;
                        }
                    } else {
                        // Mostrar una alerta o mensaje al usuario
                        JOptionPane.showMessageDialog(null, "No se puede generar la boleta. Asigne una calificación al alumno seleccionado.", "Calificaciones faltantes", JOptionPane.WARNING_MESSAGE);
                    }

                    // Actualizar la posición Y actual
                    currentY -= 20; // Espacio adicional después de la sección de
//FIN DE TABLA DE ASIGNATURAS Y CALIFICACIONES

                    // Cerrar el contenido de la página y guardar el documento
                    contenido.close();
                    // Guardar el documento como archivo PDF
                    documento.save(rutaBoletaAlumno);
                } catch (IOException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error al generar la boleta de calificaciones para el alumno: " + nombreAlumno);
                }
            }

            JOptionPane.showMessageDialog(null, "Se generaron las boletas de calificaciones para todos los alumnos");
        } else {
            JOptionPane.showMessageDialog(null, "No hay alumnos en la lista");
        }
    }//GEN-LAST:event_btnGenerarBoletasTodosActionPerformed


    private void btnCambiarCalificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCambiarCalificacionActionPerformed
        int rowCount = tablaAlumnosGrupo.getRowCount();
        boolean cambiosRealizados = false; // Variable para verificar si se realizaron cambios en las calificaciones

        // Iterar sobre todas las filas de la tabla
        for (int i = 0; i < rowCount; i++) {
            String nControl = tablaAlumnosGrupo.getValueAt(i, 0).toString(); // Obtener el nControl de la fila
            String nControlAsignatura = tablaAlumnosGrupo.getValueAt(i, 2).toString(); // Obtener el nControlAsignatura de la fila
            Object calificacionObj = tablaAlumnosGrupo.getValueAt(i, 4); // Obtener la calificación modificada de la fila como Object

            // Verificar si el valor de calificacionObj es null o vacío
            String calificacion = null;
            if (calificacionObj != null) {
                calificacion = calificacionObj.toString().trim();
                if (calificacion.isEmpty()) {
                    calificacion = null; // Establecer calificacion como null si está vacío
                }
            }

            // Realizar la actualización en la base de datos solo si hay cambios
            if (calificacion != null) {
                cambiosRealizados = true;
                String sql = "UPDATE dbo.calificaciones SET calificacion = ? WHERE ncontrol = ? AND nControlAsignatura = ?";

                try {
                    PreparedStatement statement = cn.prepareStatement(sql);
                    statement.setString(1, calificacion);
                    statement.setString(2, nControl);
                    statement.setString(3, nControlAsignatura);
                    statement.executeUpdate();
                } catch (SQLException ex) {
                    System.err.println(ex);
                    JOptionPane.showMessageDialog(null, "Error al actualizar las calificaciones, contacte al administrador");
                }
            }
        }

        if (cambiosRealizados) {
            JOptionPane.showMessageDialog(null, "Calificaciones actualizadas correctamente");
            mostrarTabla(campoGrupo, campoEspecialidad1);
        } else {
            JOptionPane.showMessageDialog(null, "No se han realizado cambios en las calificaciones");
        }
    }//GEN-LAST:event_btnCambiarCalificacionActionPerformed

    private void backTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backTxtMouseClicked
        Registrar_Grupos registrar_grupos = new Registrar_Grupos();
        registrar_grupos.setVisible(true);
        dispose();
    }//GEN-LAST:event_backTxtMouseClicked

    private void backTxtMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backTxtMouseEntered
        backBtn.setBackground(Color.CYAN);
        backBtn.setForeground(Color.white);
    }//GEN-LAST:event_backTxtMouseEntered

    private void backTxtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backTxtMouseExited
        backBtn.setBackground(Color.white);
        backBtn.setForeground(Color.black);
    }//GEN-LAST:event_backTxtMouseExited

    private void exitTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxtMouseClicked
        int option = JOptionPane.showConfirmDialog(null, "¿Estás seguro de cerrar el sistema?", "Confirmar salida", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_exitTxtMouseClicked

    private void exitTxtMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxtMouseEntered
        exitBtn.setBackground(Color.red);
        exitTxt.setForeground(Color.white);
    }//GEN-LAST:event_exitTxtMouseEntered

    private void exitTxtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxtMouseExited
        exitBtn.setBackground(Color.white);
        exitTxt.setForeground(Color.black);
    }//GEN-LAST:event_exitTxtMouseExited

    private void headerMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_headerMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();

        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_headerMouseDragged

    private void headerMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_headerMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_headerMousePressed

    private void minimizeTxt4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeTxt4MouseClicked
        setState(Login.ICONIFIED);
    }//GEN-LAST:event_minimizeTxt4MouseClicked

    private void minimizeTxt4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeTxt4MouseEntered
        minimizeBtn4.setBackground(Color.GRAY);
        minimizeTxt4.setForeground(Color.white);
    }//GEN-LAST:event_minimizeTxt4MouseEntered

    private void minimizeTxt4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeTxt4MouseExited
        minimizeBtn4.setBackground(Color.white);
        minimizeTxt4.setForeground(Color.black);
    }//GEN-LAST:event_minimizeTxt4MouseExited

    private void btnAdminInglesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminInglesActionPerformed
        // Obtener el grupo y especialidad del JLabel txtGrupo y txtEspecialidad
        String grupo = txtGrupo.getText();
        String especialidad = txtEspecialidad.getText();

        // Obtener el nControlAsignatura de la fila seleccionada en la tabla de asignaturas
        int filaSeleccionada = tablaAlumnosGrupo.getSelectedRow();
        if (filaSeleccionada == -1) {
            // Si no hay ninguna fila seleccionada, mostrar un mensaje de error y salir del método
            JOptionPane.showMessageDialog(null, "Selecciona una asignatura de inglés.");
            return;
        }
        String nControlIngles = tablaAlumnosGrupo.getValueAt(filaSeleccionada, 2).toString();

        // Crear una instancia de AdministracionIngles y pasarle los datos como parámetros al constructor
        AdministracionIngles adminIngles = new AdministracionIngles(grupo, especialidad, nControlIngles);

        // Mostrar la nueva ventana AdministracionIngles "Inglés"
        adminIngles.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnAdminInglesActionPerformed

    private void habilitarDeshabilitar() {
        if (ListAsignaturas.isEnabled()) {
            ListAsignaturas.setEnabled(false);
            btnHabilitarAsignaturas.setText("Habilitar");
            btnAgregarAsignaturas.setEnabled(false);
            btnEliminarAsignaturas.setEnabled(false);
            btnHabilitarAsignaturas.setBackground(new Color(102, 255, 0));
        } else {
            ListAsignaturas.setEnabled(true);
            btnHabilitarAsignaturas.setText("Deshabilitar");
            btnAgregarAsignaturas.setEnabled(true);
            btnEliminarAsignaturas.setEnabled(true);
            btnHabilitarAsignaturas.setBackground(new Color(255, 0, 0));
        }
    }

    private boolean verificarRegistroExistente(String grupo, String nControlAsignatura, String nControl) {
        String sql = "SELECT COUNT(*) FROM dbo.calificaciones WHERE grupo = ? AND nControlAsignatura = ? AND ncontrol = ?";
        try {
            PreparedStatement pst = cn.prepareStatement(sql);
            pst.setString(1, grupo);
            pst.setString(2, nControlAsignatura);
            pst.setString(3, nControl);

            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                int count = rs.getInt(1);
                return count > 0;
            }
        } catch (SQLException e) {
            System.err.println(e);
        }
        return false;
    }

    private String obtenerPrimerNControl() {
        String nControl = null;
        String sql = "SELECT TOP 1 ncontrol FROM dbo.calificaciones";

        try {
            PreparedStatement pst = cn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                nControl = rs.getString("ncontrol");
            }
        } catch (SQLException e) {
            System.err.println(e);
        }

        return nControl;
    }

    private String obtenerNControlAsignatura(String asignatura) {
        String nControlAsignatura = null;
        String sql = "SELECT nControlAsignatura FROM dbo.asignaturas WHERE asignatura = ?";

        try {
            PreparedStatement pst = cn.prepareStatement(sql);
            pst.setString(1, asignatura);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                nControlAsignatura = rs.getString("nControlAsignatura");
            }
        } catch (SQLException e) {
            System.err.println(e);
        }

        return nControlAsignatura;
    }

    private void eliminarAsignaturaGrupo(String grupo, String nControlAsignatura) {
        String sql = "DELETE FROM dbo.calificaciones WHERE grupo = ? AND nControlAsignatura = ?";
        try {
            PreparedStatement pst = cn.prepareStatement(sql);
            pst.setString(1, grupo);
            pst.setString(2, nControlAsignatura);

            int resultado = pst.executeUpdate();
            if (resultado > 0) {
                JOptionPane.showMessageDialog(null, "Asignatura eliminada del grupo exitosamente.");
            } else {
                JOptionPane.showMessageDialog(null, "No se encontraron registros de la asignatura en el grupo.");
            }
        } catch (SQLException e) {
            System.err.println(e);
            JOptionPane.showMessageDialog(null, "Error al eliminar la asignatura del grupo. Contacta al administrador.");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdministracionGrupos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdministracionGrupos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdministracionGrupos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdministracionGrupos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdministracionGrupos().setVisible(true);
            }
        });
    }

    public void cerrarConexion(Connection conn) {
        if (conn != null) {
            try {
                // Cerrar la conexión
                conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public void cargarAsignaturas() {
        // Obtener la especialidad del grupo desde el campo txtEspecialidad
        String especialidadGrupo = txtEspecialidad.getText();

        // Definir la consulta SQL con la condición de filtro según la especialidad
        String sql;
        if (especialidadGrupo.equalsIgnoreCase("Ingles") || especialidadGrupo.equalsIgnoreCase("Inglés")) {
            sql = "SELECT asignatura FROM dbo.asignaturas WHERE especialidad = 'eng'";
        } else {
            sql = "SELECT asignatura FROM dbo.asignaturas WHERE especialidad <> 'eng' OR especialidad IS NULL";
        }

        try {
            PreparedStatement statement = cn.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();

            // Crear un modelo para la JList
            DefaultListModel<String> modeloLista = new DefaultListModel<>();

            // Agregar las asignaturas al modelo de la JList
            while (rs.next()) {
                String asignatura = rs.getString("asignatura");
                modeloLista.addElement(asignatura);
            }

            // Asignar el modelo a la JList
            ListAsignaturas.setModel(modeloLista);
        } catch (SQLException e) {
            System.err.println(e);
            JOptionPane.showMessageDialog(null, "Error al cargar las asignaturas. Contacta al administrador.");
        }
    }

    public void cerrar() {

        try {
            this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            addWindowListener(new WindowAdapter() {

                public void windowClosing(WindowEvent e) {

                    confirmarSalida();

                }

            });

        } catch (Exception e) {
        }
    }

    public void confirmarSalida() {
        int valor = JOptionPane.showConfirmDialog(this, "¿Deseas cerrar la aplicacion?", "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (valor == JOptionPane.YES_OPTION) {

            JOptionPane.showMessageDialog(null, "Hasta pronto", "", JOptionPane.INFORMATION_MESSAGE);
            System.exit(0);

        }

    }

    Conectar con = new Conectar();
    Connection cn = con.conexion();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> ListAsignaturas;
    private javax.swing.JPanel backBtn;
    private javax.swing.JLabel backTxt;
    private javax.swing.JButton btnAdminIngles;
    private javax.swing.JButton btnAgregarAsignaturas;
    private javax.swing.JButton btnCambiarCalificacion;
    private javax.swing.JButton btnEliminarAsignaturas;
    private javax.swing.JButton btnGenerarBoletaAlumno;
    private javax.swing.JButton btnGenerarBoletasTodos;
    private javax.swing.JButton btnHabilitarAsignaturas;
    private javax.swing.JPanel exitBtn;
    private javax.swing.JLabel exitTxt;
    private javax.swing.JPanel header;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel minimizeBtn4;
    private javax.swing.JLabel minimizeTxt4;
    private javax.swing.JTable tablaAlumnosGrupo;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JLabel txtEspecialidad;
    private javax.swing.JLabel txtGrupo;
    // End of variables declaration//GEN-END:variables
}
