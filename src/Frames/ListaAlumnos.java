/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frames;

import Clases.Conectar;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;

/**
 *
 * @author Christian Delgado
 */
public class ListaAlumnos extends javax.swing.JFrame {
    
    private String numControlGrupo;
    private String numControlAsignatura;
   
    
    public ListaAlumnos(String numControlGrupo, String numControlAsignatura) {
        initComponents();
        this.numControlGrupo = numControlGrupo;
        this.numControlAsignatura = numControlAsignatura;
        this.setLocationRelativeTo(null);
        cerrar();
        cargarAlumnosDisponibles();
    }

    private void cargarAlumnosDisponibles() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Número de Control");
        modelo.addColumn("Nombre");
        modelo.addColumn("Apellido");

        tablaAlumnosDisponibles.setModel(modelo);

        Statement statement = null;
        ResultSet resultSet = null;

        try {
            statement = cn.createStatement();
            resultSet = statement.executeQuery("SELECT * FROM alumnos");

            while (resultSet.next()) {
                String numControl = resultSet.getString("numControl");
                String nombre = resultSet.getString("nombre");
                String apellido = resultSet.getString("apellidos");

                modelo.addRow(new Object[]{numControl, nombre, apellido});
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        tablaAlumnosDisponibles.setModel(modelo);
    }

    private ListaAlumnos() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // </editor-fold>

    // Método para verificar si un alumno ya está asignado en el grupo actual
    private boolean alumnoAsignadoEnGrupo(String numControlAlumno) {
        String sql = "SELECT COUNT(*) FROM alumnos_grupo WHERE numControlAlumno = ? AND numControlGrupo = ?";
        try {
            PreparedStatement statement = cn.prepareStatement(sql);
            statement.setString(1, numControlAlumno);
            statement.setString(2, numControlGrupo); // Reemplaza numControlGrupo con el valor correspondiente
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                int count = rs.getInt(1);
                return count > 0; // Devuelve true si el alumno está asignado en el grupo
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false; // Devuelve false si ocurre algún error o el alumno no está asignado en el grupo
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // </editor-fold>
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAlumnosDisponibles = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btnVolver1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablaAlumnosDisponibles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaAlumnosDisponibles);

        jButton1.setText("Agregar seleccionados");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnVolver1.setText("Volver");
        btnVolver1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolver1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(btnVolver1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(102, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
            .addGroup(layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(jButton1)
                .addGap(26, 26, 26)
                .addComponent(btnVolver1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int[] filasSeleccionadas = tablaAlumnosDisponibles.getSelectedRows();

        // Lista para almacenar los datos seleccionados
        List<Object[]> datosSeleccionados = new ArrayList<>();
        List<Object[]> datosOmitidos = new ArrayList<>(); // Lista para almacenar los datos de alumnos duplicados

        for (int fila : filasSeleccionadas) {
            String numControl = tablaAlumnosDisponibles.getValueAt(fila, 0).toString();
            String nombre = tablaAlumnosDisponibles.getValueAt(fila, 1).toString();
            String apellido = tablaAlumnosDisponibles.getValueAt(fila, 2).toString();

            // Verificar si el alumno ya está asignado en el grupo actual
            if (alumnoAsignadoEnGrupo(numControl)) {
                datosOmitidos.add(new Object[]{numControl, nombre, apellido}); // Agregar a la lista de datos omitidos
                continue; // Omitir la inserción del alumno duplicado
            }

            // Agregar los datos a la lista de datos seleccionados
            datosSeleccionados.add(new Object[]{numControl, nombre, apellido});
        }

        // Insertar los datos en la tabla alumnos_grupo de la base de datos
        try {
            String query = "INSERT INTO alumnos_grupo (numControlAlumno, nombreAlumno, apellidosAlumno, numControlGrupo, numControlAsignatura) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement statement = cn.prepareStatement(query);

            // Establecer los parámetros para cada registro seleccionado
            for (Object[] datos : datosSeleccionados) {
                statement.setString(1, datos[0].toString());
                statement.setString(2, datos[1].toString());
                statement.setString(3, datos[2].toString());
                statement.setString(4, numControlGrupo); // Reemplaza numControlGrupo con el valor correspondiente
                statement.setString(5, numControlAsignatura); // Reemplaza numControlAsignatura con el valor correspondiente
                statement.executeUpdate();
            }

            statement.close();

            // Mostrar la alerta con los alumnos agregados y los omitidos
            StringBuilder mensaje = new StringBuilder();
            mensaje.append("Alumnos agregados:\n");
            for (Object[] datos : datosSeleccionados) {
                mensaje.append("- Número de Control: ").append(datos[0]).append(", Nombre: ").append(datos[1]).append(", Apellido: ").append(datos[2]).append("\n");
            }

            if (!datosOmitidos.isEmpty()) {
                mensaje.append("\nAlumnos omitidos (duplicados):\n");
                for (Object[] datos : datosOmitidos) {
                    mensaje.append("- Número de Control: ").append(datos[0]).append(", Nombre: ").append(datos[1]).append(", Apellido: ").append(datos[2]).append("\n");
                }
            }
            AdministracionGrupos.SoundPlayer.playSystemNotificationSound();
            JOptionPane.showMessageDialog(this, mensaje.toString(), "Alumnos Agregados", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnVolver1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolver1ActionPerformed
        Registrar_Grupos registrar_grupos = new Registrar_Grupos();
        registrar_grupos.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnVolver1ActionPerformed

    Conectar con = new Conectar();
    Connection cn = con.conexion();

    public void cerrar() {

        try {
            this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            addWindowListener(new WindowAdapter() {

                public void windowClosing(WindowEvent e) {

                    confirmarSalida();

                }

            });

        } catch (Exception e) {
        }
    }

    public void confirmarSalida() {

        int valor = JOptionPane.showConfirmDialog(this, "¿Deseas cerrar la aplicacion?", "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (valor == JOptionPane.YES_OPTION) {

            JOptionPane.showMessageDialog(null, "Hasta pronto", "", JOptionPane.INFORMATION_MESSAGE);
            System.exit(0);

        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListaAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListaAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListaAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListaAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListaAlumnos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnVolver1;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaAlumnosDisponibles;
    // End of variables declaration//GEN-END:variables
}
