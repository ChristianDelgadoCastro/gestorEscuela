/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frames;

import Clases.Conectar;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;

/**
 *
 * @author Christian Delgado
 */
public class Ver_Alumnos extends javax.swing.JFrame {

    /**
     * Creates new form Ver_Alumnos
     */
    public Ver_Alumnos() {
        initComponents();
        String filtro = "";
        txtFiltro.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                filtrarTabla();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                filtrarTabla();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                filtrarTabla();
            }
        });
        mostrarTabla(filtro);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAlumnosFiltro = new javax.swing.JTable();
        txtFiltro = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnActualizarCalificaciones = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablaAlumnosFiltro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaAlumnosFiltro);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnActualizarCalificaciones.setText("Actualizar calificaciones");
        btnActualizarCalificaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarCalificacionesActionPerformed(evt);
            }
        });

        btnVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/back_icon.png"))); // NOI18N
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(btnActualizarCalificaciones)
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVolver))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnActualizarCalificaciones))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filtrarTabla() {
        String filtro = txtFiltro.getText();
        mostrarTabla(filtro);
    }

    void mostrarTabla(String filtro) {
        DefaultTableModel modelo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Permitir la edición solo en la columna de "Calificaciones"
                return column == 5;
            }
        };

        modelo.addColumn("Num Control Grupo");
        modelo.addColumn("Num Control Alumno");
        modelo.addColumn("Nombre Alumno");
        modelo.addColumn("Apellidos Alumno");
        modelo.addColumn("Num Control Asignatura");
        modelo.addColumn("Calificaciones");

        tablaAlumnosFiltro.setModel(modelo);

        String sql = "SELECT * FROM alumnos_grupo WHERE numControlGrupo LIKE ? OR numControlAlumno LIKE ? OR nombreAlumno LIKE ? OR apellidosAlumno LIKE ? OR numControlAsignatura LIKE ?";

        try {
            PreparedStatement ps = cn.prepareStatement(sql);
            String filtroLike = "%" + filtro + "%";
            for (int i = 1; i <= 5; i++) {
                ps.setString(i, filtroLike);
            }
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String numControlGrupo = rs.getString("numControlGrupo");
                String numControlAlumno = rs.getString("numControlAlumno");
                String nombreAlumno = rs.getString("nombreAlumno");
                String apellidosAlumno = rs.getString("apellidosAlumno");
                String numControlAsignatura = rs.getString("numControlAsignatura");
                String calificaciones = rs.getString("calificaciones");

                modelo.addRow(new Object[]{numControlGrupo, numControlAlumno, nombreAlumno, apellidosAlumno, numControlAsignatura, calificaciones});
            }
        } catch (SQLException e) {
            System.err.println(e);
            JOptionPane.showMessageDialog(null, "Error al cargar alumnos, contacte al administrador");
        }
    }

    private void actualizarCalificaciones() {
        int filas = tablaAlumnosFiltro.getRowCount();
        List<String> cambios = new ArrayList<>();

        for (int i = 0; i < filas; i++) {
            Object numControlGrupoObj = tablaAlumnosFiltro.getValueAt(i, 0);
            Object numControlAlumnoObj = tablaAlumnosFiltro.getValueAt(i, 1);
            Object nombreAlumnoObj = tablaAlumnosFiltro.getValueAt(i, 2);
            Object calificacionAnteriorObj = tablaAlumnosFiltro.getValueAt(i, 5);
            Object nuevaCalificacionObj = tablaAlumnosFiltro.getValueAt(i, 5);

            if (numControlGrupoObj == null || numControlAlumnoObj == null || nombreAlumnoObj == null || calificacionAnteriorObj == null || nuevaCalificacionObj == null) {
                continue; // Saltar la iteración si alguno de los campos es nulo
            }

            String numControlGrupo = numControlGrupoObj.toString();
            String numControlAlumno = numControlAlumnoObj.toString();
            String nombreAlumno = nombreAlumnoObj.toString();
            String calificacionAnterior = calificacionAnteriorObj.toString();
            String nuevaCalificacion = nuevaCalificacionObj.toString();

            // Actualizar la calificación en la base de datos
            try {
                PreparedStatement ps = cn.prepareStatement("UPDATE alumnos_grupo SET calificaciones = ? WHERE numControlGrupo = ? AND numControlAlumno = ?");
                ps.setString(1, nuevaCalificacion);
                ps.setString(2, numControlGrupo);
                ps.setString(3, numControlAlumno);
                ps.executeUpdate();

                // Registrar los cambios realizados
                cambios.add("- Alumno: " + nombreAlumno + " del grupo " + numControlGrupo + ", calificación anterior " + calificacionAnterior + " - nueva calificación: " + nuevaCalificacion);
            } catch (SQLException e) {
                System.err.println(e);
                JOptionPane.showMessageDialog(null, "Error al actualizar calificaciones, contacte al administrador");
            }
        }

        // Mostrar la alerta con los cambios realizados
        if (!cambios.isEmpty()) {
            StringBuilder mensaje = new StringBuilder();
            mensaje.append("Se han actualizado las siguientes calificaciones:\n");
            for (String cambio : cambios) {
                mensaje.append("• ").append(cambio).append("\n");
            }

            JOptionPane.showMessageDialog(null, mensaje.toString(), "Actualización de calificaciones", JOptionPane.INFORMATION_MESSAGE);
        }
    }


    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String filtro = txtFiltro.getText().trim();
        mostrarTabla(filtro);
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnActualizarCalificacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarCalificacionesActionPerformed
        actualizarCalificaciones();
    }//GEN-LAST:event_btnActualizarCalificacionesActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        Principal principal = new Principal();
        principal.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ver_Alumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ver_Alumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ver_Alumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ver_Alumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ver_Alumnos().setVisible(true);
            }
        });
    }

    Conectar con = new Conectar();
    Connection cn = con.conexion();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarCalificaciones;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnVolver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaAlumnosFiltro;
    private javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables
}
